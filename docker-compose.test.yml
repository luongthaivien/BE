version: '3'

services:
  backend-api-starter:
    build:
      context: .

    image: backend-api-starter:latest

    volumes:
      # Mounts the project directory on the host to /app inside the container,
      # allowing you to modify the code without having to rebuild the image.
      - .:/app
      # Just specify a path and let the Engine create a volume.
      # Data present in the base image at the specified mount point will be copied
      # over to the new volume upon volume initialization.
      # node_modules from this new volume will be used and not from your local dev env.
      - /app/node_modules/

    # Set environment variables from this file
    env_file:
      - .env

    # Overwrite any env var defined in .env file (if required)
    environment:
      - MONGO_HOST=mongodb://mongo/backend-api-starter-test
      - DEBUG=backend-api-starter:*

    # Link to containers in another service.
    # Links also express dependency between services in the same way as depends_on,
    # so they determine the order of service startup.
    links:
      - mysql
      - mongo
      - mongo
    command:
      - /bin/bash
      - -c
      - yarn --pure-lockfile && yarn test
# mysql
  mysql:
    container_name: mysql
    image: mysql:5.7
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
    volumes:
      - "~/docker:/rootpath"
      - "~/docker/.bash_history:/root/.bash_history"
      - "~/docker/.bashrc:/root/.bashrc"
      - "~/docker/mysql:/var/lib/mysql"
  # mongo
  mongo:
    container_name: mongo
    image: mongo:3.4
    ports:
      - "27017:27017"
    volumes:
      - "~/docker:/rootpath"
      - "~/docker/.bash_history:/root/.bash_history"
      - "~/docker/.bashrc:/root/.bashrc"
      - "~/docker/mongo/data/db:/data/db"
  # redis
  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - "~/docker:/rootpath"
      - "~/docker/.bash_history:/root/.bash_history"
      - "~/docker/.bashrc:/root/.bashrc"
